		P R E L I M I N A R Y    S P E C I F I C A T I O N

					 Due 2:00 AM, Friday, 28 September 2018

CPSC 323   Homework #2   parsnip: Parsing (Some) Bash Commands

REMINDER:  Do not under any circumstances copy someone else's code for this
assignment or give a copy of your code to someone else.  After discussing
the assignment with anyone other than a member of the teaching staff (such
discussions should be noted in your log file), do not take any written or
electronic record away and engage in a mind-numbing activity before you work on
it again.  Sharing ANY written or electronic document related to the assignment
(e.g., code or test cases) is a violation of this policy.

Since code reuse is an important part of programming, you may study and/or
incorporate published code (e.g., from textbooks or the Net) in your programs,
provided that you give proper attribution in your source code and in your log
file and that THE BULK OF THE CODE SUBMITTED IS YOUR OWN.  Note:  Removing and
rewriting comments, renaming functions/variables, or reformatting statements
does not convey ownership.


(50 points) Write a command line parser "parsnip" that
* prompts for and reads bash-like command lines from the standard input;
* splits each line into a sequence of tokens;
* parses the sequence to detect syntax errors and derive a new sequence; and
* writes a symbolic representation of the new sequence to the standard output.

Here a token is one of the following.

(1) a maximal, contiguous, nonempty sequence of non-whitespace characters
    other than the metacharacters <, >, ;, &, |, (, and ) [a SIMPLE token];

(2) a redirection symbol (<, <<, >, >>, 2>&1, or 2>&-);

(3) a pipeline symbol (|);

(4) a command operator (&& or ||);

(5) a command terminator (; or &);

(6) a left or right parenthesis [used to group commands into subcommands].

Example:  The command line

    A=B C < D E | > F G=H ( I ; J ) 2>&1 && K

  produces the output

    ARG:C ARG:E LOCAL:A=B <D | LOCAL:G=H >F 2>&1 ( ARG:I ; ARG:J ; ) && ARG:K ;

Hwk2/mainParsnip.c contains the main program for parsnip; your task is to
write the function parse(), which parses the sequence of tokens returned by
the function tokenize() (in Hwk2/tokenize.o) and derives a new sequence as
specified in the Appendix and in Hwk2/parsnip.h.

In the process of splitting a command line into tokens, the function tokenize()
implements the following bash-like features:

* [Escape Characters] The escape character \ removes any special meaning that
  is associated with the non-null, non-newline character immediately following.
  This may be used to include whitespace (but not newlines), metacharacters,
  and single/double quotes in a SIMPLE token.  The escape character is removed.

* [Single Quoted Strings] All characters appearing between matching single
  quotes (') are treated as if they were non-whitespace, non-metacharacters.
  Such strings may not contain single quotes, even when preceded by a \.  The
  surrounding quotes are removed.  If there is no matching quote, tokenize()
  writes a message to the standard error and returns an empty sequence of
  tokens.

* [Double Quoted Strings] All characters appearing between matching double
  quotes (") are treated as if they were non-whitespace, non-metacharacters,
  except that a \ that is immediately followed by a " or \ acts as an escape
  character and removes any special meaning associated with the " or \
  (otherwise \ is just an ordinary character).  The surrounding quotes and all
  escape characters are removed.  If there is no matching quote, tokenize()
  writes a message to the standard error and returns an empty sequence of
  tokens.

* [Comments] If a # would begin a SIMPLE token, then it and the remainder of
  the line (including any trailing \'s) are ignored; otherwise it is just
  another character.  Escaping a leading # allows it to begin a SIMPLE.

While deriving the new sequence of tokens, parse() must implement the following
bash-like features:

* [Local Variables] A SIMPLE token of the form NAME=VALUE specifies that VALUE
  should be assigned to the environment variable NAME when a simple command or
  subcommand is executed.  Here NAME is a sequence of one or more alphanumeric
  or underscore characters that does not begin with a digit, and VALUE may be
  empty.  Such assignments must precede the zero-th argument of the simple
  command or the opening left parenthesis of the subcommand.

* [HERE Documents] The redirection <<WORD specifies a HERE document, where
  WORD is a SIMPLE token and there may be whitespace between << and WORD.
  Subsequent lines from the standard input up to but not including a line
  containing only WORD (or the end of the standard input) are concatenated.
  If the last line read does not end with a newline, one is appended.  The
  resulting string then undergoes further processing:

  + Environment variables are expanded; that is, each sequence $NAME is
    replaced by the value of the environment variable NAME (or the empty string
    if NAME is undefined), where NAME is a maximal sequence of one or more
    alphanumeric or underscore characters that does not begin with a digit.

  + Each \ that is immediately followed by a newline is treated as a line
    splice and both are deleted.

  + Each \ that escapes an immediately following \ or $ is deleted.

  When the program or subcommand is executed (by the back-end of the shell that
  you will be writing for Homework #5), its standard input is redirected to the
  contents of the HERE document.

  HERE documents are read and expanded (in left-to-right order if there is
  more than one) AFTER the entire command line is parsed and determined to be
  syntactically valid.

Use the submit command to turn in your log file (see Homework #1) and the
C source file(s) for parsnip (including a Makefile but NOT parsnip.h or
mainParsnip.c).

YOU MUST SUBMIT YOUR FILES (INCLUDING YOUR LOG FILE) AT THE END OF ANY SESSION
WHERE YOU HAVE SPENT AT LEAST ONE HOUR WRITING OR DEBUGGING CODE, AND AT LEAST
ONCE EVERY HOUR DURING LONGER SESSIONS.  All submissions are retained.

Notes
~~~~~
1. Read and understand the Appendix and Hwk2/parsnip.h BEFORE writing any code!

2. See Matthew and Stones, Chapter 2, for a general description of bash.  See
   "man bash" or "info bash" for a complete description of local variables, the
   various redirection symbols (<, <<, >, >>, 2>&1, 2>&-), HERE documents,
   etc.  But bear in mind that there are many features and operators that
   parsnip does not implement.
	  
3. DO NOT MODIFY Hwk2/parsnip.h or Hwk2/mainParsnip.c or Hwk2/tokenize.o--the
   source code for parse() must be in a different file (or files).  To enforce
   this the test script may delete/rename local files with the names parsnip.h,
   mainParsnip.*, and tokenize.*.

4. To avoid limiting the length of a line, mainParse.c uses the library
   function getline().  (See "man 3 getline".)

5. parse() should detect errors such as:

   * unbalanced parentheses; e.g.,
       (ls bar ; ls foo

   * a missing name following a redirection symbol that requires one; e.g.,
       ls >

   * multiple input, output, or error redirection; e.g.,
       ls >bar | wc

   * both a command and a subcommand or two subcommands; e.g.,
       ls (cat /etc/motd)

   * a missing command; e.g.,
       ls | | wc

   writing a one-line message to the standard error and returning an empty
   sequence of tokens.  WARNING:  While only a few of the public tests involve
   error checking, many more of the final tests will.

6. The behavior of parsnip does not match bash in all particulars, including:

   a. parsnip does not recognize line splices outside of HERE documents.

   b. parsnip treats unterminated strings as syntactically invalid rather than
      prompting for continuation lines.

   b. Within a double-quoted string parsnip does not treat a \ that is
      immediately followed by a $, `, or !  as an escape character.

   c. parsnip allows local variable definitions and input, output, or error
      redirection to precede a subcommand.

   d. parsnip treats commands like
	> FILE
      (missing command) and
	command >file1 >>file2
      (multiple input, output, or error redirection) as syntactically invalid.

   e. parsnip does not issue a prompt for each line in a HERE document when run
      interactively.

   f. parsnip does not read or expand any HERE documents when a command is not
      syntactically valid.

   In such instances your code should reproduce the behavior of Hwk2/parsnip.

   A list of all known differences will be maintained at Hwk2/Differences.
   Please report any others that you discover.

7. mainParsnip.c contains functions which you may find useful for implementing
   and debugging parsnip:  freeList() to free all storage associated with a
   sequence of tokens, and dumpList() to print a sequence of tokens.

8. tokenize() only uses tokens of type NONE to mark the ends of sequences and
   never uses tokens of type ERROR.  Thus parse() may use NONE and ERROR as you
   see fit.

9. For simplicity, parsnip may ignore the possibility of error returns from
   malloc()/realloc().  However, it must free() all allocated storage before
   the program exits.

A. Use the library function getenv() to fetch the value of an environment
   variable.  (See "man 3 getenv" for details.)

B. The further processing of a HERE document must run in time at most quadratic
   in the sum of the lengths of the initial document and the values of any
   variables that are expanded.


Appendix
~~~~~~~~
The syntax for a bash command is

  <argument> = SIMPLE
  <filename> = SIMPLE
  <local>    = VARIABLE=VALUE
  <red_op>   = < / << / > / >>
  <red_sym>  = 2>&1 / 2>&-
  <redirect> = <red_op> <filename> / <red_sym>
  <prefix>   = [ <local> / <redirect> ]*
  <suffix>   = [ <argument> / <redirect> ]*
  <red_list> = [ <redirect> ]*
  <simple>   = <prefix> <argument> <suffix>
  <subcmd>   = <prefix> (<command>) <red_list>
  <stage>    = <simple> / <subcmd>
  <pipeline> = <stage> [ | <stage> ]*
  <and_or>   = <pipeline> [ && <pipeline> / || <pipeline> ]*
  <list>     = <and_or> [; <and_or> / & <and_or> ]*
  <command>  = <list> / <list> ; / <list> &

where / denotes alternatives; [...]* denotes a series of zero or more
occurrences; and VARIABLE=VALUE is a SIMPLE of that form.  For example,
<pipeline> and <pipeline && <pipeline> and <pipeline || <pipeline> and
<pipeline> && <pipeline> && <pipeline and ... are instances of an <and_or>.

Each sequence of tokens is stored in an array of token structs.  Each token
struct is a (TYPE,TEXT) pair, where the value of TYPE is specified by one of
the symbolic constants defined in Hwk2/parsnip.h; and TEXT is either NULL or
a pointer to an associated string whose storage is allocated by malloc() or
realloc().  The end of the array is signaled by a token struct whose type
field is NONE and whose text field is NULL.

tokenize() takes a command line and returns a pointer to such a NONE-terminated
array of token structs.

parse() reads this array; reports any syntax errors; and, if none are found,
returns a pointer to a new NONE-terminated array of token structs that is
derived as follows:

1. For each SIMPLE token that represents a <local> (i.e., one of the form
   VARIABLE=VALUE), there is a token of type LOCAL whose text field is a
   pointer to a copy of the string associated with the SIMPLE.

2. For each SIMPLE token that represents an <argument> there is a token of type
   ARG whose text field is a pointer to a copy of the string associated with
   the SIMPLE.

3. For each pair of tokens that consist of a <red_op> (i.e., a <, <<, >, or >>)
   and a FILENAME (i.e., a SIMPLE) there is a token whose type is that of the
   redirection symbol and whose text field is a pointer to a copy of the string
   associated with the SIMPLE.  If the redirection symbol is <<, then the text
   field is instead a pointer to a string containing the expanded HERE
   document.

4. For each token that contains a <red_sym> (i.e., a 2>&1 or 2>&-) there is a
   token with the same type and a NULL text field.

5. For every other token there is a token of the same type with a NULL text
   field.

6. These tokens appear in the array in the same order as the tokens from which
   they were derived, except that within a subsequence of tokens corresponding
   to a <stage>, all ARG tokens appear first, followed by all LOCAL tokens,
   followed by all tokens containing a redirection symbol, followed by all
   tokens associated with a subcommand (including the surrounding PAR_LEFT and
   PAR_RIGHT tokens).  Since a <stage> may not include both a <simple> and a
   <subcmd>, there will never be both ARG tokens and tokens associated with a
   subcommand.

7. A token with type ; is inserted at the end of any subsequence of tokens that
   constitutes a <list> but is not followed by a token of type ; or &.

All storage for the derived array (including any associated strings) must be
separate from that for the array input.

If errors are detected, tokenize() and parse() return NULL to signify the empty
sequence of tokens.

Examples (where A, B, C, ... are SIMPLE tokens):

  Command:     < A B=C D E > F
  Token Array: ARG:D ARG:E LOCAL:B=C <A >F

  Command:     A=B C D > E < F
  Token Array: ARG:C ARG:D LOCAL:A=B >E <F

  Command:     < A B | C | D | E > F
  Token Array: ARG:B <A | ARG:C | ARG:D | ARG:E >F

  Command:     A && B || C && D
  Token Array: ARG:A && ARG:B || ARG:C && ARG:D

  Command:     A ; B & C ; D || E ;
  Token Array: ARG:A ; ARG:B & ARG:C ; ARG:D || ARG:E ;

  Command:     (A ; B &) | (C || D) && E
  Token Array: ( ARG:A ; ARG:B & ) | ( C || D ; ) && E ;
								CS-323-09/11/18
